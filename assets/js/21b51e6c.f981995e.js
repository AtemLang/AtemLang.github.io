"use strict";(self.webpackChunkstd_atem_doc=self.webpackChunkstd_atem_doc||[]).push([[3142],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=s(n),m=o,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[u]="string"==typeof e?e:o,i[1]=p;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7e3:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>p,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const a={},i="Simple Pointer",p={unversionedId:"Language/Pointers",id:"Language/Pointers",title:"Simple Pointer",description:"Introduction",source:"@site/docs/02-Language/06-Pointers.md",sourceDirName:"02-Language",slug:"/Language/Pointers",permalink:"/docs/Language/Pointers",draft:!1,editUrl:"https://github.com/AtemLang/atem/tree/main/packages/create-docusaurus/templates/shared/docs/02-Language/06-Pointers.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"documentSidebar",previous:{title:"Static Array",permalink:"/docs/Language/Arrays/StaticArray"},next:{title:"Optional",permalink:"/docs/Language/Sum Type/Optional"}},l={},s=[{value:"Introduction",id:"introduction",level:2},{value:"Simple Pointers",id:"simple-pointers",level:2},{value:"Declaring and Dereferencing Pointers",id:"declaring-and-dereferencing-pointers",level:3},{value:"Managed Pointers",id:"managed-pointers",level:2},{value:"Optional Pointers",id:"optional-pointers",level:2},{value:"Pointer Arithmetic",id:"pointer-arithmetic",level:2}],c={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"simple-pointer"},"Simple Pointer"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Pointer")," is a special kind of variable that stores an memory address in it. When a pointer stores an memory address that represents another object in the memory, we say that the pointer is ",(0,o.kt)("strong",{parentName:"p"},"pointing")," to the object. You can access the object indirectly by the pointers pointed to the object, or so-called ",(0,o.kt)("em",{parentName:"p"},"dereferencing"),"."),(0,o.kt)("p",null,"Pointers are powerful tools especially operating the ",(0,o.kt)("em",{parentName:"p"},"low-level resources"),". But pointers, especially the ",(0,o.kt)("em",{parentName:"p"},"simple pointers"),", could be ",(0,o.kt)("em",{parentName:"p"},"very")," dangerous if you didn't use them well. The most dangerous accident of using pointers is try to dereference a pointer that points to a object which no longer exist or a pointer that points to ",(0,o.kt)("strong",{parentName:"p"},"null"),". We call the former ",(0,o.kt)("em",{parentName:"p"},"dangling pointer")," and the latter ",(0,o.kt)("em",{parentName:"p"},"null pointer"),". Coding with these kinds of pointers could result in bug, vulnerabilities, or even a unrecoverable crash."),(0,o.kt)("p",null,"Fortunately, Atem also provides ways to prevent most disadvantage of pointers. You can use ",(0,o.kt)("em",{parentName:"p"},"optional pointers")," and ",(0,o.kt)("em",{parentName:"p"},"managed pointers")," to replace the most use of simple pointers. The flexibility of Atem also enables us to implement garbage collectors or even borrow checkers to ensure further safety."),(0,o.kt)("h2",{id:"simple-pointers"},"Simple Pointers"),(0,o.kt)("h3",{id:"declaring-and-dereferencing-pointers"},"Declaring and Dereferencing Pointers"),(0,o.kt)("p",null,"You can declare a pointer of ",(0,o.kt)("inlineCode",{parentName:"p"},"TypeA")," like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-atem"},"ptr: TypeA.& = undefined;\nptr: TypeA pointer = undefined;\n")),(0,o.kt)("h2",{id:"managed-pointers"},"Managed Pointers"),(0,o.kt)("h2",{id:"optional-pointers"},"Optional Pointers"),(0,o.kt)("h2",{id:"pointer-arithmetic"},"Pointer Arithmetic"))}d.isMDXComponent=!0}}]);