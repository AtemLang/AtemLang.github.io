"use strict";(self.webpackChunkstd_atem_doc=self.webpackChunkstd_atem_doc||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"documentSidebar":[{"type":"link","label":"Comments","href":"/docs/Comments","docId":"Comments"},{"type":"link","label":"Introduction","href":"/docs/intro","docId":"intro"},{"type":"category","label":"Types","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Type Casting","href":"/docs/Types/TypeCasting","docId":"Types/TypeCasting"},{"type":"link","label":"Types","href":"/docs/Types/Types","docId":"Types/Types"}]},{"type":"link","label":"Values","href":"/docs/Values","docId":"Values"},{"type":"link","label":"Inspirations List","href":"/docs/Inspirations List","docId":"Inspirations List"},{"type":"link","label":"Variables","href":"/docs/Variables","docId":"Variables"},{"type":"category","label":"Functions","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Function","href":"/docs/Functions/Function","docId":"Functions/Function"},{"type":"link","label":"Lambda","href":"/docs/Functions/Lambda","docId":"Functions/Lambda"}]},{"type":"category","label":"Arrays","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Advanced Array Operations","href":"/docs/Arrays/Advanced","docId":"Arrays/Advanced"},{"type":"link","label":"Array Literals","href":"/docs/Arrays/ArrayLiteral","docId":"Arrays/ArrayLiteral"},{"type":"link","label":"Dynamic Arrays","href":"/docs/Arrays/DynamicArray","docId":"Arrays/DynamicArray"},{"type":"link","label":"Map","href":"/docs/Arrays/Map","docId":"Arrays/Map"},{"type":"link","label":"Set","href":"/docs/Arrays/Set","docId":"Arrays/Set"},{"type":"link","label":"Static Array","href":"/docs/Arrays/StaticArray","docId":"Arrays/StaticArray"}]},{"type":"link","label":"Pointers","href":"/docs/Pointers","docId":"Pointers"},{"type":"category","label":"Sum Type","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Optional","href":"/docs/Sum Type/Optional","docId":"Sum Type/Optional"},{"type":"link","label":"Tuple","href":"/docs/Sum Type/Tuple","docId":"Sum Type/Tuple"},{"type":"link","label":"Variant","href":"/docs/Sum Type/Variant","docId":"Sum Type/Variant"}]},{"type":"category","label":"Blocks","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"overview","href":"/docs/Blocks/overview","docId":"Blocks/overview"}]},{"type":"category","label":"Namespaces","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/docs/Namespaces/Overview","docId":"Namespaces/Overview"}]},{"type":"category","label":"Project Structure","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Project Structure","href":"/docs/Project Structure/Overview","docId":"Project Structure/Overview"}]},{"type":"category","label":"Operators","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Operator List","href":"/docs/Operators/Operator List","docId":"Operators/Operator List"}]},{"type":"category","label":"Statements","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/docs/Statements/Overview","docId":"Statements/Overview"}]},{"type":"category","label":"Expressions","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/docs/Expressions/Overview","docId":"Expressions/Overview"}]},{"type":"category","label":"User-defined Types","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Class","href":"/docs/User-defined Types/Class","docId":"User-defined Types/Class"},{"type":"link","label":"Concept and Implement","href":"/docs/User-defined Types/Concept and Implementation","docId":"User-defined Types/Concept and Implementation"},{"type":"link","label":"ConstructorAndDestructor","href":"/docs/User-defined Types/ConstructorAndDestructor","docId":"User-defined Types/ConstructorAndDestructor"},{"type":"link","label":"Enumeration","href":"/docs/User-defined Types/Enumeration","docId":"User-defined Types/Enumeration"},{"type":"link","label":"Member","href":"/docs/User-defined Types/Member","docId":"User-defined Types/Member"},{"type":"link","label":"Struct","href":"/docs/User-defined Types/Struct","docId":"User-defined Types/Struct"}]},{"type":"link","label":"Exception Handling","href":"/docs/Exceptions","docId":"Exceptions"},{"type":"category","label":"Generics","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/docs/Generics/Overview","docId":"Generics/Overview"}]},{"type":"category","label":"Metaprogramming","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/docs/Metaprogramming/Overview","docId":"Metaprogramming/Overview"}]},{"type":"category","label":"Debug","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/docs/Debug/Overview","docId":"Debug/Overview"}]},{"type":"link","label":"Undefined Behavior","href":"/docs/Undefined Behavior","docId":"Undefined Behavior"},{"type":"category","label":"Safety","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/docs/Safety/Overview","docId":"Safety/Overview"}]},{"type":"category","label":"Build Environment","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/docs/Build Environment/Overview","docId":"Build Environment/Overview"}]},{"type":"category","label":"Appendix","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Atem Compiler Built-in List","href":"/docs/Appendix/Builtin","docId":"Appendix/Builtin"},{"type":"link","label":"Keywords","href":"/docs/Appendix/Keywords","docId":"Appendix/Keywords"},{"type":"link","label":"Std-atem Style Guide","href":"/docs/Appendix/Style","docId":"Appendix/Style"}]}]},"docs":{"Appendix/Builtin":{"id":"Appendix/Builtin","title":"Atem Compiler Built-in List","description":"Atem compiler has a number of built-in functionality that only designed for easier Atem language development and faster compilation speed. You should not depend on these compiler built-in in your code because these built-ins often change with the changing development needs.","sidebar":"documentSidebar"},"Appendix/Keywords":{"id":"Appendix/Keywords","title":"Keywords","description":"| Keyword     | Description |","sidebar":"documentSidebar"},"Appendix/Style":{"id":"Appendix/Style","title":"Std-atem Style Guide","description":"Naming Style","sidebar":"documentSidebar"},"Arrays/Advanced":{"id":"Arrays/Advanced","title":"Advanced Array Operations","description":"Modifying Memory Layout","sidebar":"documentSidebar"},"Arrays/ArrayLiteral":{"id":"Arrays/ArrayLiteral","title":"Array Literals","description":"The array\'s literals is represented in the form of ArrayType:","sidebar":"documentSidebar"},"Arrays/DynamicArray":{"id":"Arrays/DynamicArray","title":"Dynamic Arrays","description":"You can create dynamic-sized arrays by using []Type:","sidebar":"documentSidebar"},"Arrays/Map":{"id":"Arrays/Map","title":"Map","description":"You can create associative arrays by [IndexType]ValueType:","sidebar":"documentSidebar"},"Arrays/Set":{"id":"Arrays/Set","title":"Set","description":"","sidebar":"documentSidebar"},"Arrays/StaticArray":{"id":"Arrays/StaticArray","title":"Static Array","description":"You can create static arrays by using [size]Type, the size must be a compile-time known positive integer:","sidebar":"documentSidebar"},"Blocks/overview":{"id":"Blocks/overview","title":"overview","description":"","sidebar":"documentSidebar"},"Build Environment/Overview":{"id":"Build Environment/Overview","title":"Overview","description":"","sidebar":"documentSidebar"},"Comments":{"id":"Comments","title":"Comments","description":"Single-Line Comments","sidebar":"documentSidebar"},"Debug/Overview":{"id":"Debug/Overview","title":"Overview","description":"","sidebar":"documentSidebar"},"Exceptions":{"id":"Exceptions","title":"Exception Handling","description":"Exception handling is the process of responding to and recovering from error conditions in your program. Atem provides first-class support for throwing, catching, propagating, and manipulating recoverable exceptions at runtime.","sidebar":"documentSidebar"},"Expressions/Overview":{"id":"Expressions/Overview","title":"Overview","description":"","sidebar":"documentSidebar"},"Functions/Function":{"id":"Functions/Function","title":"Function","description":"Functions are self-contained chunks of code that perform a specific task. You give a function a name that identifies what it does, and this name is used to call the function to perform its task when needed.","sidebar":"documentSidebar"},"Functions/Lambda":{"id":"Functions/Lambda","title":"Lambda","description":"Showcase: Similarity Between Functions and Lambdas","sidebar":"documentSidebar"},"Generics/Overview":{"id":"Generics/Overview","title":"Overview","description":"","sidebar":"documentSidebar"},"Inspirations List":{"id":"Inspirations List","title":"Inspirations List","description":"This list contains the language/library features that are inspired by other languages/libraries.","sidebar":"documentSidebar"},"intro":{"id":"intro","title":"Introduction","description":"WARNING: Standard Atem Sub-language is highly experimental.","sidebar":"documentSidebar"},"Metaprogramming/Overview":{"id":"Metaprogramming/Overview","title":"Overview","description":"","sidebar":"documentSidebar"},"Namespaces/Overview":{"id":"Namespaces/Overview","title":"Overview","description":"","sidebar":"documentSidebar"},"Operators/Operator List":{"id":"Operators/Operator List","title":"Operator List","description":"Arithmetic Operators","sidebar":"documentSidebar"},"Pointers":{"id":"Pointers","title":"Pointers","description":"Introduction","sidebar":"documentSidebar"},"Project Structure/Overview":{"id":"Project Structure/Overview","title":"Project Structure","description":"Introduction","sidebar":"documentSidebar"},"Safety/Overview":{"id":"Safety/Overview","title":"Overview","description":"","sidebar":"documentSidebar"},"Statements/Overview":{"id":"Statements/Overview","title":"Overview","description":"","sidebar":"documentSidebar"},"Sum Type/Optional":{"id":"Sum Type/Optional","title":"Optional","description":"Atem provides null safety by providing language built-in optional types.","sidebar":"documentSidebar"},"Sum Type/Tuple":{"id":"Sum Type/Tuple","title":"Tuple","description":"Tuple is like a anonymous struct with convenient light-weight syntax. A common usage of tuple is to enable return multiple value from functions. Tuple\'s value/type elements can be access with indexes or names(if any).","sidebar":"documentSidebar"},"Sum Type/Variant":{"id":"Sum Type/Variant","title":"Variant","description":"Variant Type","sidebar":"documentSidebar"},"Types/TypeCasting":{"id":"Types/TypeCasting","title":"Type Casting","description":"Type casting is a way to check the type of an instance, or to treat that instance as a different superclass or subclass from somewhere else in its own class hierarchy.","sidebar":"documentSidebar"},"Types/Types":{"id":"Types/Types","title":"Types","description":"Built-in Types","sidebar":"documentSidebar"},"Undefined Behavior":{"id":"Undefined Behavior","title":"Undefined Behavior","description":"","sidebar":"documentSidebar"},"User-defined Types/Class":{"id":"User-defined Types/Class","title":"Class","description":"","sidebar":"documentSidebar"},"User-defined Types/Concept and Implementation":{"id":"User-defined Types/Concept and Implementation","title":"Concept and Implement","description":"","sidebar":"documentSidebar"},"User-defined Types/ConstructorAndDestructor":{"id":"User-defined Types/ConstructorAndDestructor","title":"ConstructorAndDestructor","description":"","sidebar":"documentSidebar"},"User-defined Types/Enumeration":{"id":"User-defined Types/Enumeration","title":"Enumeration","description":"An enumeration defines a common type for a group of related values and enables you to work with those values in a type-safe way within your code.","sidebar":"documentSidebar"},"User-defined Types/Member":{"id":"User-defined Types/Member","title":"Member","description":"","sidebar":"documentSidebar"},"User-defined Types/Struct":{"id":"User-defined Types/Struct","title":"Struct","description":"","sidebar":"documentSidebar"},"Values":{"id":"Values","title":"Values","description":"Integer Literals","sidebar":"documentSidebar"},"Variables":{"id":"Variables","title":"Variables","description":"Constants and variables associate a name with a value of a particular type. The value of a constant can\'t be changed once it\'s set, whereas a variable can be set to a different value in the future.","sidebar":"documentSidebar"}}}')}}]);