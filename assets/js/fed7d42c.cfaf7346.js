"use strict";(self.webpackChunkstd_atem_doc=self.webpackChunkstd_atem_doc||[]).push([[6241],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=s(n),d=a,g=c["".concat(p,".").concat(d)]||c[d]||m[d]||o;return n?r.createElement(g,l(l({ref:t},u),{},{components:n})):r.createElement(g,l({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[c]="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8227:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:1,title:"Introduction"},l="Introduction",i={unversionedId:"intro",id:"intro",title:"Introduction",description:"WARNING: Standard Atem Sub-language is highly experimental.",source:"@site/docs/01-intro.md",sourceDirName:".",slug:"/intro",permalink:"/docs/intro",draft:!1,editUrl:"https://github.com/AtemLang/atem/tree/main/packages/create-docusaurus/templates/shared/docs/01-intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Introduction"},sidebar:"documentSidebar",next:{title:"Comments",permalink:"/docs/Comments"}},p={},s=[{value:"Design Goals",id:"design-goals",level:2},{value:"Atem Standard Library",id:"atem-standard-library",level:2},{value:"Language Tour",id:"language-tour",level:2},{value:"Hello World",id:"hello-world",level:3},{value:"Fibonacci",id:"fibonacci",level:3},{value:"Allocating Memory",id:"allocating-memory",level:3}],u={toc:s},c="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"WARNING: Standard Atem Sub-language is highly experimental.")),(0,a.kt)("p",null,"Atem is a general purpose programming sub-language built on the Atem Core Language(core-atem). std-atem takes inspiration from many other languages like C++,  ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/hsutter/cppfront"},"Cpp2"),", ",(0,a.kt)("a",{parentName:"p",href:"https://circle-lang.org"},"Circle"),", ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/carbon-language/carbon-lang"},"Carbon"),", ",(0,a.kt)("a",{parentName:"p",href:"https://www.rust-lang.org/"},"Rust"),", ",(0,a.kt)("a",{parentName:"p",href:"https://www.swift.org/documentation/"},"Swift"),", ",(0,a.kt)("a",{parentName:"p",href:"https://dlang.org/"},"D"),", ",(0,a.kt)("a",{parentName:"p",href:"https://ziglang.org/"},"Zig"),", ",(0,a.kt)("a",{parentName:"p",href:"https://scala-lang.org"},"Scala"),", ",(0,a.kt)("a",{parentName:"p",href:"https://kotlinlang.org/"},"Kotlin"),", ",(0,a.kt)("a",{parentName:"p",href:"https://go.dev/"},"Go"),", ",(0,a.kt)("a",{parentName:"p",href:"https://www.haskell.org/"},"Haskell"),", and ",(0,a.kt)("a",{parentName:"p",href:"https://julialang.org/"},"Julia"),". You can use std-atem by importing the ",(0,a.kt)("inlineCode",{parentName:"p"},"std.stdatem")," module."),(0,a.kt)("h2",{id:"design-goals"},"Design Goals"),(0,a.kt)("p",null,"We expect that many sub-language, software and library will be built on the Atem, so we set a few design goals for std-atem(in no particular order):"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Performant")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Scalable")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Robust")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Extensible and Customizable")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Expressive")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Consistent")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Opt-in Safety"))),(0,a.kt)("h2",{id:"atem-standard-library"},"Atem Standard Library"),(0,a.kt)("p",null,"Atem has its own standard library(called atem-stdlib) which contains commonly used algorithms, data structures,  and many other tools to help you build programs on Atem. The atem-stdlib also has its own documentation, see here(WIP)."),(0,a.kt)("h2",{id:"language-tour"},"Language Tour"),(0,a.kt)("h3",{id:"hello-world"},"Hello World"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'println := import func std.io.print.println\n\nmain := {\n    println("Hello World!")\n}\n')),(0,a.kt)("h3",{id:"fibonacci"},"Fibonacci"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-atem"},'println := import func std.io.print.println\n\nfib := (n: UInt64) -> Int64 recur \nexpect n > 0\n{\n    return if n == 1 or n == 2 then 1 else self(n - 1) + self(n - 2)\n}\n\nmain := {\n    println("fib(10)$") //print 55\n}\n')),(0,a.kt)("h3",{id:"allocating-memory"},"Allocating Memory"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-atem"},'println := import func std.io.print.println\nGeneralPurposeAllocator := import class std.memory.allocator.GeneralPurposeAllocator;\n\nmain := func {\n    gpa := var GeneralPurposeAllocator.init()\n    defer { gpa.deallocateAll() }\n    allocator := var gpa.getAllocator()\n    \n    buffer := var try!allocator.allocate(size = 64)\n    println("Get a buffer: buffer.getRawPointer()$")\n    \n    return 0\n}\n')))}m.isMDXComponent=!0}}]);