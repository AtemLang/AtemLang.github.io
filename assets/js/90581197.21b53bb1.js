"use strict";(self.webpackChunkstd_atem_doc=self.webpackChunkstd_atem_doc||[]).push([[2100],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),c=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(a),f=n,m=p["".concat(s,".").concat(f)]||p[f]||d[f]||i;return a?r.createElement(m,o(o({ref:t},u),{},{components:a})):r.createElement(m,o({ref:t},u))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:n,o[1]=l;for(var c=2;c<i;c++)o[c]=a[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}f.displayName="MDXCreateElement"},8579:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=a(7462),n=(a(7294),a(3905));const i={},o="Variables",l={unversionedId:"Language/Variables/Overview",id:"Language/Variables/Overview",title:"Variables",description:"No Identifier Shadowing",source:"@site/docs/02-Language/04-Variables/Overview.md",sourceDirName:"02-Language/04-Variables",slug:"/Language/Variables/Overview",permalink:"/docs/Language/Variables/Overview",draft:!1,editUrl:"https://github.com/AtemLang/atem/tree/main/packages/create-docusaurus/templates/shared/docs/02-Language/04-Variables/Overview.md",tags:[],version:"current",frontMatter:{},sidebar:"documentSidebar",previous:{title:"Values",permalink:"/docs/Language/Values"},next:{title:"Overview",permalink:"/docs/Language/Functions/Overview"}},s={},c=[{value:"No Identifier Shadowing",id:"no-identifier-shadowing",level:2},{value:"Long Identifiers",id:"long-identifiers",level:2},{value:"Variables and Constants",id:"variables-and-constants",level:2},{value:"Storage Duration Specifiers",id:"storage-duration-specifiers",level:2},{value:"Global Storage Duration Specifier",id:"global-storage-duration-specifier",level:3},{value:"Static Storage Duration Specifier",id:"static-storage-duration-specifier",level:3},{value:"Thread-Local Storage Duration Specifier",id:"thread-local-storage-duration-specifier",level:3},{value:"Local Storage Duration Specifier",id:"local-storage-duration-specifier",level:3}],u={toc:c},p="wrapper";function d(e){let{components:t,...a}=e;return(0,n.kt)(p,(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"variables"},"Variables"),(0,n.kt)("h2",{id:"no-identifier-shadowing"},"No Identifier Shadowing"),(0,n.kt)("p",null,"Variable identifiers are never allowed to shadow the identifiers from outer scope:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-atem"},"foo := 1;\n{\n    foo := 2;   //compile error\n}\n")),(0,n.kt)("p",null,"If you can confirm that you really need name shadowing(why?), you can annotate the variable with ",(0,n.kt)("inlineCode",{parentName:"p"},"@shadowing"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-atem"},"foo := 1;\n{\n    foo @shadowing := 2;    //good\n}\n")),(0,n.kt)("p",null,"Or you can just turn the compile-time safety check off by using the ",(0,n.kt)("inlineCode",{parentName:"p"},"@compileTimeSafetyProfile()"),"(but again, why you need this?):"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-atem"},"foo := 1;\n@compileTimeSafetyProfile(safety.compiletime.ruleset.no_shadowing, false);\n{\n    foo @shadowing := 2;    //good\n}\n")),(0,n.kt)("h2",{id:"long-identifiers"},"Long Identifiers"),(0,n.kt)("p",null,"Normal identifiers can only contains numbers, characters, and underscores. You can make the identifier to be regular string by using ",(0,n.kt)("inlineCode",{parentName:"p"},'@""'),"s to quote them:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-atem"},'@"hey i am a variable with a very long identifier!" := "Hello";\n')),(0,n.kt)("p",null,"The long identifiers are also allowed to be the same as keywords:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-atem"},'@"true" := true;\nassert(@"true" == true);\n')),(0,n.kt)("h2",{id:"variables-and-constants"},"Variables and Constants"),(0,n.kt)("p",null,"You can specify the mutability of variables by adding a ",(0,n.kt)("inlineCode",{parentName:"p"},"const/mutable")," specifier to it, you can't modify variable that is ",(0,n.kt)("inlineCode",{parentName:"p"},"const"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-atem"},"foo := 1;\n//equals to:\nfoo const := 1;\nfoo = 2;    //error! try to assign a constant\n\nbar mutable := 2;\nbar = 42;   //good\n")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"const/mutable")," will be part of the variable's type:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-atem"},"foo const := 1:i32;\nbar mutable := 2:i32;\n//equals to:\nfoo : const i32 := 1;\nbar : mutable i32 := 1;\n//or\nbar : i32 := 1;\n")),(0,n.kt)("p",null,"You can remove the ",(0,n.kt)("inlineCode",{parentName:"p"},"const")," in type by type traits:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-atem"},"foo : const i32 = 1;\nBarType := foo~getType()~removeConst();\nbar : BarType = 2;\nbar = 42;   //good\n")),(0,n.kt)("h2",{id:"storage-duration-specifiers"},"Storage Duration Specifiers"),(0,n.kt)("h3",{id:"global-storage-duration-specifier"},"Global Storage Duration Specifier"),(0,n.kt)("p",null,"The global variables have static lifetime and order-independent. Their initializer are implicitly compile-time. The variables declares in the module level are implicitly global."),(0,n.kt)("h3",{id:"static-storage-duration-specifier"},"Static Storage Duration Specifier"),(0,n.kt)("p",null,"The static variables also have static lifetime and order-independent. Their initializer are implicitly compile-time. Only the variables declares in the block level can be static."),(0,n.kt)("h3",{id:"thread-local-storage-duration-specifier"},"Thread-Local Storage Duration Specifier"),(0,n.kt)("h3",{id:"local-storage-duration-specifier"},"Local Storage Duration Specifier"))}d.isMDXComponent=!0}}]);