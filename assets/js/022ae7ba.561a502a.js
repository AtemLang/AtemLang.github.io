"use strict";(self.webpackChunkstd_atem_doc=self.webpackChunkstd_atem_doc||[]).push([[130],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),c=l(n),d=r,f=c["".concat(s,".").concat(d)]||c[d]||m[d]||o;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u[c]="string"==typeof e?e:r,i[1]=u;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7514:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>u,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const o={},i="Enumeration",u={unversionedId:"User-defined Types/Enumeration",id:"User-defined Types/Enumeration",title:"Enumeration",description:"An enumeration defines a common type for a group of related values and enables you to work with those values in a type-safe way within your code.",source:"@site/docs/14-User-defined Types/Enumeration.md",sourceDirName:"14-User-defined Types",slug:"/User-defined Types/Enumeration",permalink:"/docs/User-defined Types/Enumeration",draft:!1,editUrl:"https://github.com/AtemLang/atem/tree/main/packages/create-docusaurus/templates/shared/docs/14-User-defined Types/Enumeration.md",tags:[],version:"current",frontMatter:{},sidebar:"documentSidebar",previous:{title:"ConstructorAndDestructor",permalink:"/docs/User-defined Types/ConstructorAndDestructor"},next:{title:"Member",permalink:"/docs/User-defined Types/Member"}},s={},l=[{value:"Syntax",id:"syntax",level:2},{value:"Raw Values",id:"raw-values",level:3},{value:"Associated Values",id:"associated-values",level:3},{value:"Enumeration and Pattern Matching",id:"enumeration-and-pattern-matching",level:2},{value:"Recursive Enumeration",id:"recursive-enumeration",level:2}],p={toc:l},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"enumeration"},"Enumeration"),(0,r.kt)("p",null,"An ",(0,r.kt)("em",{parentName:"p"},"enumeration")," defines a common type for a group of related values and enables you to work with those values in a type-safe way within your code."),(0,r.kt)("h2",{id:"syntax"},"Syntax"),(0,r.kt)("p",null,"A enumeration is introduced by ",(0,r.kt)("inlineCode",{parentName:"p"},"enum")," declarator:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"EnumerationName: enum = {\n    \n};\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Enumerators")," are a list of identifiers separated by commas:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"ExtensionState: enum = {\n    Empty,\n    Unloaded,\n    Ready,  //extra trailing comma is allowed\n}\n")),(0,r.kt)("p",null,"You can define a enumeration instance that stores an enumerator:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-atem"},"foo: ExtensionState = ExtensionState.Empty;\n//the type can be omitted:\nfoo := ExtensionState.Empty;\n")),(0,r.kt)("p",null,"Once the type of a enumeration instance is known, the enumerator's enumeration can be omitted:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-atem"},"foo mutable := ExtensionState.Empty;\nfoo = .Ready;\n")),(0,r.kt)("h3",{id:"raw-values"},"Raw Values"),(0,r.kt)("p",null,"An enumerator can have a ",(0,r.kt)("em",{parentName:"p"},"raw value")," to represent itself. If no raw value is provided, the identifier string will be the enumerator's default raw value. You can provide raw value for a enumerator by adding ",(0,r.kt)("inlineCode",{parentName:"p"},":= value")," to the identifier:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-atem"},'ExtensionState: enum = {\n    Empty := true,\n    Unloaded := 1::Int32,\n    Loading,\n    Ready := "ready_state",\n}\n')),(0,r.kt)("p",null,"You can create enumeration instances by their raw values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-atem"},"foo := ExtensionState.init(rawValue = true);\n//equals to:\nfoo := ExtensionState.Empty;\n")),(0,r.kt)("p",null,"If the arguments of enumeration's raw value constructor are not compile-time known, the constructor may throw an ",(0,r.kt)("inlineCode",{parentName:"p"},"std.user.exception.Enumeration.InvalidRawValue(rawValue: ValueType)")," exception, so you need to use ",(0,r.kt)("inlineCode",{parentName:"p"},"try")," to initialize them."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-atem"},'foo := try ExtensionState.init(rawValue = bar) catch {\n    println("Invalid argument exception.rawValue$ for enumeration ExtensionState!");\n};\nfoo := try? ExtensionState.init(rawValue = bar);\nfoo := try! ExtensionState.init(rawValue = bar);\n')),(0,r.kt)("h3",{id:"associated-values"},"Associated Values"),(0,r.kt)("p",null,"Enumerators can have ",(0,r.kt)("em",{parentName:"p"},"associated values")," of any given type. Associated values are particularly useful when the enumerator can't carry enough needed information by itself. Using associated values enables us to store and pass values alongside the enumerator."),(0,r.kt)("p",null,"To make enumerators have associated values, a list should be provided after the colon ",(0,r.kt)("inlineCode",{parentName:"p"},":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-atem"},"ExtensionState: enum = {\n    Empty,\n    Unloaded,\n    Loading: (path: filesystem.Path),\n    Ready: (instance: Extension, uuid: utils.UUID)\n}\n")),(0,r.kt)("p",null,"Then you can create enumeration instances with associated value provided:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-atem"},"foo := ExtensionState.Ready(instance = bar, uuid = bar.uuid);\n")),(0,r.kt)("h2",{id:"enumeration-and-pattern-matching"},"Enumeration and Pattern Matching"),(0,r.kt)("h2",{id:"recursive-enumeration"},"Recursive Enumeration"))}m.isMDXComponent=!0}}]);