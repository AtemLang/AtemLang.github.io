"use strict";(self.webpackChunkstd_atem_doc=self.webpackChunkstd_atem_doc||[]).push([[5993],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,f=d["".concat(l,".").concat(m)]||d[m]||c[m]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u[d]="string"==typeof e?e:a,i[1]=u;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2035:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>u,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={},i="Enumeration",u={unversionedId:"Language/User-defined Types/Enumeration",id:"Language/User-defined Types/Enumeration",title:"Enumeration",description:"An enumeration defines a common type for a group of related values and enables you to work with those values in a type-safe way within your code.",source:"@site/docs/02-Language/14-User-defined Types/Enumeration.md",sourceDirName:"02-Language/14-User-defined Types",slug:"/Language/User-defined Types/Enumeration",permalink:"/docs/Language/User-defined Types/Enumeration",draft:!1,editUrl:"https://github.com/AtemLang/atem/tree/main/packages/create-docusaurus/templates/shared/docs/02-Language/14-User-defined Types/Enumeration.md",tags:[],version:"current",frontMatter:{},sidebar:"documentSidebar",previous:{title:"Concept and Implement",permalink:"/docs/Language/User-defined Types/Concept and Implementation"},next:{title:"Overview",permalink:"/docs/Language/User-defined Types/Overview"}},l={},s=[{value:"Syntax",id:"syntax",level:2},{value:"Raw Values",id:"raw-values",level:3},{value:"Associated Values",id:"associated-values",level:3}],p={toc:s},d="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"enumeration"},"Enumeration"),(0,a.kt)("p",null,"An ",(0,a.kt)("em",{parentName:"p"},"enumeration")," defines a common type for a group of related values and enables you to work with those values in a type-safe way within your code."),(0,a.kt)("h2",{id:"syntax"},"Syntax"),(0,a.kt)("p",null,"A enumeration is introduced by ",(0,a.kt)("inlineCode",{parentName:"p"},"enum")," declarator:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"EnumerationName: enum = {\n    \n};\n")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Enumerators")," are a list of identifiers separated by commas:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"ExtensionState: enum = {\n    Empty,\n    Unloaded,\n    Ready,  //extra trailing comma is allowed\n}\n")),(0,a.kt)("h3",{id:"raw-values"},"Raw Values"),(0,a.kt)("p",null,"An enumerator can have a ",(0,a.kt)("em",{parentName:"p"},"raw value")," to represent itself. If no raw value is provided, the identifier string will be the enumerator's default raw value. You can provide raw value for a enumerator by adding ",(0,a.kt)("inlineCode",{parentName:"p"},":= value")," to the identifier:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-atem"},'ExtensionState: enum = {\n    Empty := true,\n    Unloaded := 1::Int32,\n    Ready := "ready_state", //extra trailing comma is allowed\n}\n')),(0,a.kt)("h3",{id:"associated-values"},"Associated Values"))}c.isMDXComponent=!0}}]);