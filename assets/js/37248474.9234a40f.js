"use strict";(self.webpackChunkstd_atem_doc=self.webpackChunkstd_atem_doc||[]).push([[7775],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var i=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=i.createContext({}),s=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},l=function(e){var t=s(e.components);return i.createElement(c.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=s(n),d=o,h=u["".concat(c,".").concat(d)]||u[d]||g[d]||a;return n?i.createElement(h,r(r({ref:t},l),{},{components:n})):i.createElement(h,r({ref:t},l))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,r=new Array(a);r[0]=d;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p[u]="string"==typeof e?e:o,r[1]=p;for(var s=2;s<a;s++)r[s]=n[s];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4382:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>g,frontMatter:()=>a,metadata:()=>p,toc:()=>s});var i=n(7462),o=(n(7294),n(3905));const a={},r="Exception Handling",p={unversionedId:"Language/Exceptions/Overview",id:"Language/Exceptions/Overview",title:"Exception Handling",description:"Exception handling is the process of responding to and recovering from error conditions in your program. Atem provides first-class support for throwing, catching, propagating, and manipulating recoverable exceptions at runtime.",source:"@site/docs/02-Language/15-Exceptions/Overview.md",sourceDirName:"02-Language/15-Exceptions",slug:"/Language/Exceptions/Overview",permalink:"/docs/Language/Exceptions/Overview",draft:!1,editUrl:"https://github.com/AtemLang/atem/tree/main/packages/create-docusaurus/templates/shared/docs/02-Language/15-Exceptions/Overview.md",tags:[],version:"current",frontMatter:{},sidebar:"documentSidebar",previous:{title:"Struct",permalink:"/docs/Language/User-defined Types/Struct"},next:{title:"Overview",permalink:"/docs/Language/Generics/Overview"}},c={},s=[{value:"Defining and Throwing Exceptions",id:"defining-and-throwing-exceptions",level:2},{value:"Handling Exceptions",id:"handling-exceptions",level:2},{value:"Propagating Exceptions",id:"propagating-exceptions",level:3},{value:"Catching Exceptions",id:"catching-exceptions",level:3},{value:"Catching Exceptions with Optional Value",id:"catching-exceptions-with-optional-value",level:4},{value:"Disabling Exception Propagation",id:"disabling-exception-propagation",level:3}],l={toc:s},u="wrapper";function g(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,i.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"exception-handling"},"Exception Handling"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Exception handling")," is the process of responding to and recovering from error conditions in your program. Atem provides first-class support for throwing, catching, propagating, and manipulating recoverable exceptions at runtime."),(0,o.kt)("h2",{id:"defining-and-throwing-exceptions"},"Defining and Throwing Exceptions"),(0,o.kt)("p",null,"Exceptions are represented by values which type conforms the ",(0,o.kt)("inlineCode",{parentName:"p"},"Exception")," Concept. The concept ",(0,o.kt)("inlineCode",{parentName:"p"},"Exception")," indicates that a type can be used for exception handling."),(0,o.kt)("p",null,"Unlike other languages that use classes to represent exceptions, exceptions in Atem are often appear in the form of enumerations. Consider the ",(0,o.kt)("inlineCode",{parentName:"p"},"FilesystemException")," example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-atem"},"FilesystemException: enum implement Exception = {\n    InvalidPathException(path: String),\n    FileNotExistException(path: fs.Path),\n    PermissionDeniedException,\n};\n")),(0,o.kt)("p",null,"A instance of exception type could be thrown by a ",(0,o.kt)("inlineCode",{parentName:"p"},"throw"),"  statement:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-atem"},'throw FilesystemException.FileNotExistException.init(path = .init("/etc/nothing"));\n')),(0,o.kt)("h2",{id:"handling-exceptions"},"Handling Exceptions"),(0,o.kt)("h3",{id:"propagating-exceptions"},"Propagating Exceptions"),(0,o.kt)("p",null,"If your code isn't responsible for handling the exception, you can simply let the exceptions be propagated by ",(0,o.kt)("em",{parentName:"p"},"throwing")," functions. Throwing functions propagate exceptions that are thrown inside the function to the caller. To make a function be able to propagate exceptions, mark the function with ",(0,o.kt)("inlineCode",{parentName:"p"},"throws")," specifier."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-atem"},"canThrow: throws func = {};\ncannotThrow: throws func = {};\n")),(0,o.kt)("p",null,"In the example below, we implement a ",(0,o.kt)("inlineCode",{parentName:"p"},"copyFile")," function which may throw exceptions:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-atem"},"FilesystemException: enum implement Exception = {\n    InvalidPathException(path: String),\n    FileNotExistException(path: fs.Path),\n    PermissionDeniedException,\n};\n\ncopyFile:\n(sourcePath src: String, destinationPath dst: String) -> ()\nthrows func = {\n    src_path := fs.Path.init(pathStr = src) ?? \n        throw FilesystemException.InvalidPathException.init(path = src);\n    dst_path := fs.Path.init(pathStr = dst) ?? \n        throw FilesystemException.InvalidPathException.init(path = dst);\n        \n    if(not src_path.exist) {\n        throw FilesystemException.FileNotExistException.init(path = src_path);\n    }\n        \n    if(_low_level_copy(src_path, dst_path)) {\n        throw FilesystemException.PermissionDeniedException.init();\n    }\n};\n")),(0,o.kt)("h3",{id:"catching-exceptions"},"Catching Exceptions"),(0,o.kt)("h4",{id:"catching-exceptions-with-optional-value"},"Catching Exceptions with Optional Value"),(0,o.kt)("h3",{id:"disabling-exception-propagation"},"Disabling Exception Propagation"))}g.isMDXComponent=!0}}]);