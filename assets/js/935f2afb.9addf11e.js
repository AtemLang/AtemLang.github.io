"use strict";(self.webpackChunkstd_atem_doc=self.webpackChunkstd_atem_doc||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"documentSidebar":[{"type":"link","label":"Introduction","href":"/docs/intro","docId":"intro"},{"type":"category","label":"Language","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Comments","href":"/docs/Language/Comments","docId":"Language/Comments"},{"type":"category","label":"Types","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Type Casting","href":"/docs/Language/Types/TypeCasting","docId":"Language/Types/TypeCasting"},{"type":"link","label":"Types","href":"/docs/Language/Types/Types","docId":"Language/Types/Types"}]},{"type":"link","label":"Values","href":"/docs/Language/Values","docId":"Language/Values"},{"type":"link","label":"Variables","href":"/docs/Language/Variables","docId":"Language/Variables"},{"type":"category","label":"Functions","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Function","href":"/docs/Language/Functions/Function","docId":"Language/Functions/Function"},{"type":"link","label":"Lambda","href":"/docs/Language/Functions/Lambda","docId":"Language/Functions/Lambda"}]},{"type":"category","label":"Arrays","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Advanced Array Operations","href":"/docs/Language/Arrays/Advanced","docId":"Language/Arrays/Advanced"},{"type":"link","label":"Array Literals","href":"/docs/Language/Arrays/ArrayLiteral","docId":"Language/Arrays/ArrayLiteral"},{"type":"link","label":"Dynamic Arrays","href":"/docs/Language/Arrays/DynamicArray","docId":"Language/Arrays/DynamicArray"},{"type":"link","label":"Map","href":"/docs/Language/Arrays/Map","docId":"Language/Arrays/Map"},{"type":"link","label":"Set","href":"/docs/Language/Arrays/Set","docId":"Language/Arrays/Set"},{"type":"link","label":"Static Array","href":"/docs/Language/Arrays/StaticArray","docId":"Language/Arrays/StaticArray"}]},{"type":"link","label":"Pointers","href":"/docs/Language/Pointers","docId":"Language/Pointers"},{"type":"category","label":"Sum Type","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Optional","href":"/docs/Language/Sum Type/Optional","docId":"Language/Sum Type/Optional"},{"type":"link","label":"Tuple","href":"/docs/Language/Sum Type/Tuple","docId":"Language/Sum Type/Tuple"},{"type":"link","label":"Variant","href":"/docs/Language/Sum Type/Variant","docId":"Language/Sum Type/Variant"}]},{"type":"category","label":"Blocks","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"overview","href":"/docs/Language/Blocks/overview","docId":"Language/Blocks/overview"}]},{"type":"category","label":"Namespaces","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/docs/Language/Namespaces/Overview","docId":"Language/Namespaces/Overview"}]},{"type":"category","label":"Project Structure","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Project Structure","href":"/docs/Language/Project Structure/Overview","docId":"Language/Project Structure/Overview"}]},{"type":"category","label":"Operators","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Operator List","href":"/docs/Language/Operators/Operator List","docId":"Language/Operators/Operator List"}]},{"type":"category","label":"Statements","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/docs/Language/Statements/Overview","docId":"Language/Statements/Overview"}]},{"type":"category","label":"Expressions","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/docs/Language/Expressions/Overview","docId":"Language/Expressions/Overview"}]},{"type":"category","label":"User-defined Types","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Class","href":"/docs/Language/User-defined Types/Class","docId":"Language/User-defined Types/Class"},{"type":"link","label":"Concept and Implement","href":"/docs/Language/User-defined Types/Concept and Implementation","docId":"Language/User-defined Types/Concept and Implementation"},{"type":"link","label":"ConstructorAndDestructor","href":"/docs/Language/User-defined Types/ConstructorAndDestructor","docId":"Language/User-defined Types/ConstructorAndDestructor"},{"type":"link","label":"Enumeration","href":"/docs/Language/User-defined Types/Enumeration","docId":"Language/User-defined Types/Enumeration"},{"type":"link","label":"Member","href":"/docs/Language/User-defined Types/Member","docId":"Language/User-defined Types/Member"},{"type":"link","label":"Struct","href":"/docs/Language/User-defined Types/Struct","docId":"Language/User-defined Types/Struct"}]},{"type":"link","label":"Exception Handling","href":"/docs/Language/Exceptions","docId":"Language/Exceptions"},{"type":"category","label":"Generics","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/docs/Language/Generics/Overview","docId":"Language/Generics/Overview"}]},{"type":"category","label":"Metaprogramming","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/docs/Language/Metaprogramming/Overview","docId":"Language/Metaprogramming/Overview"}]},{"type":"category","label":"Debug","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/docs/Language/Debug/Overview","docId":"Language/Debug/Overview"}]},{"type":"link","label":"Undefined Behavior","href":"/docs/Language/Undefined Behavior","docId":"Language/Undefined Behavior"},{"type":"category","label":"Safety","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/docs/Language/Safety/Overview","docId":"Language/Safety/Overview"}]},{"type":"category","label":"Build Environment","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/docs/Language/Build Environment/Overview","docId":"Language/Build Environment/Overview"}]},{"type":"category","label":"Appendix","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Std-atem Style Guide","href":"/docs/Language/Appendix/Style","docId":"Language/Appendix/Style"}]}]},{"type":"category","label":"Standard Library","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Standard Library","href":"/docs/Standard Library/stdlib","docId":"Standard Library/stdlib"}]},{"type":"link","label":"Inspirations List","href":"/docs/Inspirations List","docId":"Inspirations List"}]},"docs":{"Inspirations List":{"id":"Inspirations List","title":"Inspirations List","description":"This list contains the language/library features that are inspired by other languages/libraries.","sidebar":"documentSidebar"},"intro":{"id":"intro","title":"Introduction","description":"WARNING: Standard Atem Sub-language is highly experimental.","sidebar":"documentSidebar"},"Language/Appendix/Style":{"id":"Language/Appendix/Style","title":"Std-atem Style Guide","description":"Naming Style","sidebar":"documentSidebar"},"Language/Arrays/Advanced":{"id":"Language/Arrays/Advanced","title":"Advanced Array Operations","description":"Modifying Memory Layout","sidebar":"documentSidebar"},"Language/Arrays/ArrayLiteral":{"id":"Language/Arrays/ArrayLiteral","title":"Array Literals","description":"The array\'s literals is represented in the form of ArrayType:","sidebar":"documentSidebar"},"Language/Arrays/DynamicArray":{"id":"Language/Arrays/DynamicArray","title":"Dynamic Arrays","description":"You can create dynamic-sized arrays by using []Type:","sidebar":"documentSidebar"},"Language/Arrays/Map":{"id":"Language/Arrays/Map","title":"Map","description":"You can create associative arrays by [IndexType]ValueType:","sidebar":"documentSidebar"},"Language/Arrays/Set":{"id":"Language/Arrays/Set","title":"Set","description":"","sidebar":"documentSidebar"},"Language/Arrays/StaticArray":{"id":"Language/Arrays/StaticArray","title":"Static Array","description":"You can create static arrays by using [size]Type, the size must be a compile-time known positive integer:","sidebar":"documentSidebar"},"Language/Blocks/overview":{"id":"Language/Blocks/overview","title":"overview","description":"","sidebar":"documentSidebar"},"Language/Build Environment/Overview":{"id":"Language/Build Environment/Overview","title":"Overview","description":"","sidebar":"documentSidebar"},"Language/Comments":{"id":"Language/Comments","title":"Comments","description":"Single-Line Comments","sidebar":"documentSidebar"},"Language/Debug/Overview":{"id":"Language/Debug/Overview","title":"Overview","description":"","sidebar":"documentSidebar"},"Language/Exceptions":{"id":"Language/Exceptions","title":"Exception Handling","description":"Exception handling is the process of responding to and recovering from error conditions in your program. Atem provides first-class support for throwing, catching, propagating, and manipulating recoverable exceptions at runtime.","sidebar":"documentSidebar"},"Language/Expressions/Overview":{"id":"Language/Expressions/Overview","title":"Overview","description":"","sidebar":"documentSidebar"},"Language/Functions/Function":{"id":"Language/Functions/Function","title":"Function","description":"Functions are self-contained chunks of code that perform a specific task. You give a function a name that identifies what it does, and this name is used to call the function to perform its task when needed.","sidebar":"documentSidebar"},"Language/Functions/Lambda":{"id":"Language/Functions/Lambda","title":"Lambda","description":"Showcase: Similarity Between Functions and Lambdas","sidebar":"documentSidebar"},"Language/Generics/Overview":{"id":"Language/Generics/Overview","title":"Overview","description":"","sidebar":"documentSidebar"},"Language/Metaprogramming/Overview":{"id":"Language/Metaprogramming/Overview","title":"Overview","description":"","sidebar":"documentSidebar"},"Language/Namespaces/Overview":{"id":"Language/Namespaces/Overview","title":"Overview","description":"","sidebar":"documentSidebar"},"Language/Operators/Operator List":{"id":"Language/Operators/Operator List","title":"Operator List","description":"Arithmetic Operators","sidebar":"documentSidebar"},"Language/Pointers":{"id":"Language/Pointers","title":"Pointers","description":"Introduction","sidebar":"documentSidebar"},"Language/Project Structure/Overview":{"id":"Language/Project Structure/Overview","title":"Project Structure","description":"Introduction","sidebar":"documentSidebar"},"Language/Safety/Overview":{"id":"Language/Safety/Overview","title":"Overview","description":"","sidebar":"documentSidebar"},"Language/Statements/Overview":{"id":"Language/Statements/Overview","title":"Overview","description":"","sidebar":"documentSidebar"},"Language/Sum Type/Optional":{"id":"Language/Sum Type/Optional","title":"Optional","description":"Atem provides null safety by providing language built-in optional types.","sidebar":"documentSidebar"},"Language/Sum Type/Tuple":{"id":"Language/Sum Type/Tuple","title":"Tuple","description":"Tuple is like a anonymous struct with convenient light-weight syntax. A common usage of tuple is to enable return multiple value from functions. Tuple\'s value/type elements can be access with indexes or names(if any).","sidebar":"documentSidebar"},"Language/Sum Type/Variant":{"id":"Language/Sum Type/Variant","title":"Variant","description":"Variant Type","sidebar":"documentSidebar"},"Language/Types/TypeCasting":{"id":"Language/Types/TypeCasting","title":"Type Casting","description":"Type casting is a way to check the type of an instance, or to treat that instance as a different superclass or subclass from somewhere else in its own class hierarchy.","sidebar":"documentSidebar"},"Language/Types/Types":{"id":"Language/Types/Types","title":"Types","description":"Built-in Types","sidebar":"documentSidebar"},"Language/Undefined Behavior":{"id":"Language/Undefined Behavior","title":"Undefined Behavior","description":"","sidebar":"documentSidebar"},"Language/User-defined Types/Class":{"id":"Language/User-defined Types/Class","title":"Class","description":"","sidebar":"documentSidebar"},"Language/User-defined Types/Concept and Implementation":{"id":"Language/User-defined Types/Concept and Implementation","title":"Concept and Implement","description":"","sidebar":"documentSidebar"},"Language/User-defined Types/ConstructorAndDestructor":{"id":"Language/User-defined Types/ConstructorAndDestructor","title":"ConstructorAndDestructor","description":"","sidebar":"documentSidebar"},"Language/User-defined Types/Enumeration":{"id":"Language/User-defined Types/Enumeration","title":"Enumeration","description":"An enumeration defines a common type for a group of related values and enables you to work with those values in a type-safe way within your code.","sidebar":"documentSidebar"},"Language/User-defined Types/Member":{"id":"Language/User-defined Types/Member","title":"Member","description":"","sidebar":"documentSidebar"},"Language/User-defined Types/Struct":{"id":"Language/User-defined Types/Struct","title":"Struct","description":"","sidebar":"documentSidebar"},"Language/Values":{"id":"Language/Values","title":"Values","description":"Integer Literals","sidebar":"documentSidebar"},"Language/Variables":{"id":"Language/Variables","title":"Variables","description":"Constants and variables associate a name with a value of a particular type. The value of a constant can\'t be changed once it\'s set, whereas a variable can be set to a different value in the future.","sidebar":"documentSidebar"},"Standard Library/stdlib":{"id":"Standard Library/stdlib","title":"Standard Library","description":"Introduction","sidebar":"documentSidebar"}}}')}}]);