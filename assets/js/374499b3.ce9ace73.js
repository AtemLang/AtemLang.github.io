"use strict";(self.webpackChunkstd_atem_doc=self.webpackChunkstd_atem_doc||[]).push([[8354],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=o.createContext({}),u=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return o.createElement(p.Provider,{value:t},e.children)},m="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=u(n),d=a,y=m["".concat(p,".").concat(d)]||m[d]||s[d]||r;return n?o.createElement(y,l(l({ref:t},c),{},{components:n})):o.createElement(y,l({ref:t},c))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[m]="string"==typeof e?e:a,l[1]=i;for(var u=2;u<r;u++)l[u]=n[u];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3808:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>s,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var o=n(7462),a=(n(7294),n(3905));const r={},l="Optional",i={unversionedId:"Sum Type/Optional",id:"Sum Type/Optional",title:"Optional",description:"Atem provides null safety by providing language built-in optional types.",source:"@site/docs/07-Sum Type/Optional.md",sourceDirName:"07-Sum Type",slug:"/Sum Type/Optional",permalink:"/docs/Sum Type/Optional",draft:!1,editUrl:"https://github.com/AtemLang/atem/tree/main/packages/create-docusaurus/templates/shared/docs/07-Sum Type/Optional.md",tags:[],version:"current",frontMatter:{},sidebar:"documentSidebar",previous:{title:"Pointers",permalink:"/docs/Pointers"},next:{title:"Tuple",permalink:"/docs/Sum Type/Tuple"}},p={},u=[{value:"Optional Types",id:"optional-types",level:2},{value:"Optional Pointers",id:"optional-pointers",level:2}],c={toc:u},m="wrapper";function s(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"optional"},"Optional"),(0,a.kt)("p",null,"Atem provides null safety by providing language built-in optional types."),(0,a.kt)("p",null,"The question mark symbolizes the optional type, you can convert types to optional types by putting a question mark in front of them, like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-atem"},"optional_int mutable: ?i8 = 12;\noptional_int = null;\n")),(0,a.kt)("p",null,"Now the variable ",(0,a.kt)("inlineCode",{parentName:"p"},"optional_int")," could be an ",(0,a.kt)("inlineCode",{parentName:"p"},"i8")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,a.kt)("h2",{id:"optional-types"},"Optional Types"),(0,a.kt)("p",null,"You can create optional type by putting a ",(0,a.kt)("inlineCode",{parentName:"p"},"?")," in front of the type:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-atem"},"opt_int mutable: ?i8 = 12;\n")),(0,a.kt)("p",null,"To access the child type of an optional type, use compile-time reflection:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-atem"},"assert(^opt_int.getType().getChildType() == i8);\n")),(0,a.kt)("p",null,"You can initialize or assign ",(0,a.kt)("inlineCode",{parentName:"p"},"null"),' to an optional to mean the optional is "empty":'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-atem"},"opt_int = null;\n")),(0,a.kt)("p",null,"To use the value of the optional, you need to unwrap it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-atem"},"int1 := opt_int ?? -1;  //the int1 would be -1 when the opt_int is null\nint2 := try opt_int.?;  //will throw an UnwrappingException when the opt_int is null\nint3 := opt_int.!;  //will terminate program at runtime or terminate compilation at compile-time\n")),(0,a.kt)("p",null,"If the child type of an optional has members, the optional chaining operator ",(0,a.kt)("inlineCode",{parentName:"p"},"!.")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"?.")," will be used to access them:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-atem"},'blog : struct = {\n    id: u8;\n    name: string;\n    checkBlogValidity: () -> bool func {...};\n};\n\nblog_opt: ?blog = .{id = 3, name = "std-atem"};\nid := try blog_opt?.id;\n//equivalent to:\nid := try blog_opt.?.id;\n\nname := blog_opt!.name; //will terminate program at runtime or terminate compilation at compile-time\n//equivalent to:\nname := blog_opt.!.name;\n')),(0,a.kt)("h2",{id:"optional-pointers"},"Optional Pointers"),(0,a.kt)("p",null,"The normal pointers in Atem couldn't be null. If you want a pointer to be nullable, use optional pointer instead:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-atem"},"ptr mutable: i8.& = null;   //compile error\nopt_ptr mutable: ?i8.& = null;  //good\n")),(0,a.kt)("p",null,"The optional pointer is guaranteed to be the same size of the child pointer type:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-atem"},"assert(^opt_ptr.getType().size() == ^i8.&.size());\n")))}s.isMDXComponent=!0}}]);