"use strict";(self.webpackChunkstd_atem_doc=self.webpackChunkstd_atem_doc||[]).push([[556],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},d="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=u(t),p=r,m=d["".concat(s,".").concat(p)]||d[p]||f[p]||i;return t?a.createElement(m,o(o({ref:n},l),{},{components:t})):a.createElement(m,o({ref:n},l))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=p;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[d]="string"==typeof e?e:r,o[1]=c;for(var u=2;u<i;u++)o[u]=t[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},6969:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>f,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var a=t(7462),r=(t(7294),t(3905));const i={},o="Function",c={unversionedId:"Language/Functions/Function",id:"Language/Functions/Function",title:"Function",description:"Functions are self-contained chunks of code that perform a specific task. You give a function a name that identifies what it does, and this name is used to call the function to perform its task when needed.",source:"@site/docs/02-Language/05-Functions/Function.md",sourceDirName:"02-Language/05-Functions",slug:"/Language/Functions/Function",permalink:"/docs/Language/Functions/Function",draft:!1,editUrl:"https://github.com/AtemLang/atem/tree/main/packages/create-docusaurus/templates/shared/docs/02-Language/05-Functions/Function.md",tags:[],version:"current",frontMatter:{},sidebar:"documentSidebar",previous:{title:"Variables",permalink:"/docs/Language/Variables"},next:{title:"Lambda",permalink:"/docs/Language/Functions/Lambda"}},s={},u=[{value:"Defining and Calling Functions",id:"defining-and-calling-functions",level:2},{value:"Function Parameters",id:"function-parameters",level:2},{value:"Function Return Values",id:"function-return-values",level:2},{value:"Named Function Parameters",id:"named-function-parameters",level:2},{value:"Function Parameter Directives",id:"function-parameter-directives",level:2},{value:"Function Types",id:"function-types",level:2},{value:"Nested Functions",id:"nested-functions",level:2}],l={toc:u},d="wrapper";function f(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"function"},"Function"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Functions")," are self-contained chunks of code that perform a specific task. You give a function a name that identifies what it does, and this name is used to call the function to perform its task when needed."),(0,r.kt)("p",null,"Like many other functional programming languages, functions are first-class citizens of Atem. You can assign them to the variables, pass them as parameters, return them from functions, or declare nested functions. The unified syntax of declaring variables and functions also implies the similarity between them:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-atem"},"//a variable\nfoo: i8 = 3;\n\n//a function\nbar: func = {};\n")),(0,r.kt)("p",null,"Every functions in Atem has its own types, consisting of the function's parameter types, return type, annotations, and contracts. You can use these types like any other types in Atem."),(0,r.kt)("h2",{id:"defining-and-calling-functions"},"Defining and Calling Functions"),(0,r.kt)("h2",{id:"function-parameters"},"Function Parameters"),(0,r.kt)("h2",{id:"function-return-values"},"Function Return Values"),(0,r.kt)("h2",{id:"named-function-parameters"},"Named Function Parameters"),(0,r.kt)("h2",{id:"function-parameter-directives"},"Function Parameter Directives"),(0,r.kt)("h2",{id:"function-types"},"Function Types"),(0,r.kt)("h2",{id:"nested-functions"},"Nested Functions"))}f.isMDXComponent=!0}}]);