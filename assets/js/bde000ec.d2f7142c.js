"use strict";(self.webpackChunkstd_atem_doc=self.webpackChunkstd_atem_doc||[]).push([[4913],{3905:(t,a,e)=>{e.d(a,{Zo:()=>o,kt:()=>u});var n=e(7294);function r(t,a,e){return a in t?Object.defineProperty(t,a,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[a]=e,t}function l(t,a){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(t,a).enumerable}))),e.push.apply(e,n)}return e}function i(t){for(var a=1;a<arguments.length;a++){var e=null!=arguments[a]?arguments[a]:{};a%2?l(Object(e),!0).forEach((function(a){r(t,a,e[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):l(Object(e)).forEach((function(a){Object.defineProperty(t,a,Object.getOwnPropertyDescriptor(e,a))}))}return t}function p(t,a){if(null==t)return{};var e,n,r=function(t,a){if(null==t)return{};var e,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)e=l[n],a.indexOf(e)>=0||(r[e]=t[e]);return r}(t,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)e=l[n],a.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(r[e]=t[e])}return r}var d=n.createContext({}),m=function(t){var a=n.useContext(d),e=a;return t&&(e="function"==typeof t?t(a):i(i({},a),t)),e},o=function(t){var a=m(t.components);return n.createElement(d.Provider,{value:a},t.children)},k="mdxType",N={inlineCode:"code",wrapper:function(t){var a=t.children;return n.createElement(n.Fragment,{},a)}},g=n.forwardRef((function(t,a){var e=t.components,r=t.mdxType,l=t.originalType,d=t.parentName,o=p(t,["components","mdxType","originalType","parentName"]),k=m(e),g=r,u=k["".concat(d,".").concat(g)]||k[g]||N[g]||l;return e?n.createElement(u,i(i({ref:a},o),{},{components:e})):n.createElement(u,i({ref:a},o))}));function u(t,a){var e=arguments,r=a&&a.mdxType;if("string"==typeof t||r){var l=e.length,i=new Array(l);i[0]=g;var p={};for(var d in a)hasOwnProperty.call(a,d)&&(p[d]=a[d]);p.originalType=t,p[k]="string"==typeof t?t:r,i[1]=p;for(var m=2;m<l;m++)i[m]=e[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,e)}g.displayName="MDXCreateElement"},6309:(t,a,e)=>{e.r(a),e.d(a,{assets:()=>d,contentTitle:()=>i,default:()=>N,frontMatter:()=>l,metadata:()=>p,toc:()=>m});var n=e(7462),r=(e(7294),e(3905));const l={},i="Operator List",p={unversionedId:"Language/Operators/Operator List",id:"Language/Operators/Operator List",title:"Operator List",description:"Arithmetic Operators",source:"@site/docs/Language/Operators/Operator List.md",sourceDirName:"Language/Operators",slug:"/Language/Operators/Operator List",permalink:"/docs/Language/Operators/Operator List",draft:!1,editUrl:"https://github.com/AtemLang/atem/tree/main/packages/create-docusaurus/templates/shared/docs/Language/Operators/Operator List.md",tags:[],version:"current",frontMatter:{},sidebar:"documentSidebar",previous:{title:"Overview",permalink:"/docs/Language/Namespaces/Overview"},next:{title:"Overview",permalink:"/docs/Language/Operators/Overview"}},d={},m=[{value:"Arithmetic Operators",id:"arithmetic-operators",level:2},{value:"Assignment Operators",id:"assignment-operators",level:2},{value:"Comparison Operators",id:"comparison-operators",level:2},{value:"Logical Operators",id:"logical-operators",level:2},{value:"Bitwise Operators",id:"bitwise-operators",level:2},{value:"Reflection Operators",id:"reflection-operators",level:2},{value:"Range Operators",id:"range-operators",level:2},{value:"Other Operators",id:"other-operators",level:2}],o={toc:m},k="wrapper";function N(t){let{components:a,...e}=t;return(0,r.kt)(k,(0,n.Z)({},o,e,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"operator-list"},"Operator List"),(0,r.kt)("h2",{id:"arithmetic-operators"},"Arithmetic Operators"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Syntax"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Operator Category"),(0,r.kt)("th",{parentName:"tr",align:null},"Overloadable"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a + b")),(0,r.kt)("td",{parentName:"tr",align:null},"Addition"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"stdatem.operator.arithmetic.binary")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"AdditionTrait"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a +% b")),(0,r.kt)("td",{parentName:"tr",align:null},"Overflowing Addition"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"stdatem.operator.arithmetic.binary")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OverflowingAdditionTrait"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a +\\| b")),(0,r.kt)("td",{parentName:"tr",align:null},"Saturating Addition"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"stdatem.operator.arithmetic.binary")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SaturatingAdditionTrait"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a - b")),(0,r.kt)("td",{parentName:"tr",align:null},"Subtraction"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"stdatem.operator.arithmetic.binary")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SubtractionTrait"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a -% b")),(0,r.kt)("td",{parentName:"tr",align:null},"Overflowing Subtraction"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"stdatem.operator.arithmetic.binary")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OverflowingSubtractionTrait"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a -\\| b")),(0,r.kt)("td",{parentName:"tr",align:null},"Saturating Subtraction"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"stdatem.operator.arithmetic.binary")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SaturatingSubtractionTrait"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a * b")),(0,r.kt)("td",{parentName:"tr",align:null},"Multiplication"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"stdatem.operator.arithmetic.binary")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"MultiplicationTrait"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a *% b")),(0,r.kt)("td",{parentName:"tr",align:null},"Overflowing Multiplication"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"stdatem.operator.arithmetic.binary")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OverflowingMultiplicationTrait"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a *\\| b")),(0,r.kt)("td",{parentName:"tr",align:null},"Saturating Multiplication"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"stdatem.operator.arithmetic.binary")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SaturatingMultiplicationTrait"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a / b ")),(0,r.kt)("td",{parentName:"tr",align:null},"Division"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"stdatem.operator.arithmetic.binary")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"DivisionTrait"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a % b")),(0,r.kt)("td",{parentName:"tr",align:null},"Remainder Division"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"stdatem.operator.arithmetic.binary")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"RemainderDivisionTrait"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-a")),(0,r.kt)("td",{parentName:"tr",align:null},"Negation"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"stdatem.operator.arithmetic.unary")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NegationTrait"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-%a")),(0,r.kt)("td",{parentName:"tr",align:null},"Overflowing Negation"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"stdatem.operator.arithmetic.unary")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OverflowingNegationTrait"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a ** b")),(0,r.kt)("td",{parentName:"tr",align:null},"Power"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"stdatem.operator.arithmetic.binary")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"PowerTrait"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a **% b")),(0,r.kt)("td",{parentName:"tr",align:null},"Overflowing Power"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"stdatem.operator.arithmetic.binary")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"OverflowingPowerTrait"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a **\\| b")),(0,r.kt)("td",{parentName:"tr",align:null},"Saturating Power"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"stdatem.operator.arithmetic.binary")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SaturatingPowerTrait"))))),(0,r.kt)("h2",{id:"assignment-operators"},"Assignment Operators"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Syntax"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Operator Category"),(0,r.kt)("th",{parentName:"tr",align:null},"Overloadable"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a = b")),(0,r.kt)("td",{parentName:"tr",align:null},"Simple Assignment"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.assignment.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a += b")),(0,r.kt)("td",{parentName:"tr",align:null},"Addition Assignment"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.assignment.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a +&= b")),(0,r.kt)("td",{parentName:"tr",align:null},"Wrapping Addition Assignment"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.assignment.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a +\\|= b")),(0,r.kt)("td",{parentName:"tr",align:null},"Saturating Addition Assignment"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.assignment.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a -= b")),(0,r.kt)("td",{parentName:"tr",align:null},"Subtraction Assignment"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.assignment.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a -%= b")),(0,r.kt)("td",{parentName:"tr",align:null},"Wrapping Subtraction Assignment"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.assignment.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a -\\|= b")),(0,r.kt)("td",{parentName:"tr",align:null},"Saturating Subtraction Assignment"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.assignment.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a *= b")),(0,r.kt)("td",{parentName:"tr",align:null},"Multiplication Assignment"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.assignment.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a *%= b")),(0,r.kt)("td",{parentName:"tr",align:null},"Wrapping Multiplication Assignment"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.assignment.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a *\\|= b")),(0,r.kt)("td",{parentName:"tr",align:null},"Saturating Multiplication Assignment"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.assignment.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a /= b")),(0,r.kt)("td",{parentName:"tr",align:null},"Division Assignment"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.assignment.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a %= b")),(0,r.kt)("td",{parentName:"tr",align:null},"Remainder Division Assignment"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.assignment.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"<<=")),(0,r.kt)("td",{parentName:"tr",align:null},"Bitwise Left Shift Assignment"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.assignment.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"<<\\|=")),(0,r.kt)("td",{parentName:"tr",align:null},"Saturating Bitwise Left Shift Assignment"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.assignment.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},">>=")),(0,r.kt)("td",{parentName:"tr",align:null},"Bitwise Right Shift Assignment"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.assignment.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"&=")),(0,r.kt)("td",{parentName:"tr",align:null},"Bitwise AND Assignment"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.assignment.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"\\|=")),(0,r.kt)("td",{parentName:"tr",align:null},"Bitwise OR Assignment"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.assignment.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"^=")),(0,r.kt)("td",{parentName:"tr",align:null},"Bitwise NOT Assignment"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.assignment.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("h2",{id:"comparison-operators"},"Comparison Operators"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Syntax"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Operator Category"),(0,r.kt)("th",{parentName:"tr",align:null},"Overloadable"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a > b")),(0,r.kt)("td",{parentName:"tr",align:null},"Greater than"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.comparison.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a < b")),(0,r.kt)("td",{parentName:"tr",align:null},"Less than"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.comparison.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a >= b")),(0,r.kt)("td",{parentName:"tr",align:null},"Greater than or Equal to"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.comparison.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a <= b")),(0,r.kt)("td",{parentName:"tr",align:null},"Less than or Equal to"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.comparison.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a != b")),(0,r.kt)("td",{parentName:"tr",align:null},"Not Equal to"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.comparison.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a == b")),(0,r.kt)("td",{parentName:"tr",align:null},"Equal to"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.comparison.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a <=> b")),(0,r.kt)("td",{parentName:"tr",align:null},"Three-way Comparison"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.comparison.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("h2",{id:"logical-operators"},"Logical Operators"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Syntax"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Operator Category"),(0,r.kt)("th",{parentName:"tr",align:null},"Overloadable"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"not a")),(0,r.kt)("td",{parentName:"tr",align:null},"Logical NOT"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.logical.unary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a and b")),(0,r.kt)("td",{parentName:"tr",align:null},"Logical AND"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.logical.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a or b")),(0,r.kt)("td",{parentName:"tr",align:null},"Logical OR"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.logical.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("h2",{id:"bitwise-operators"},"Bitwise Operators"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Syntax"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Operator Category"),(0,r.kt)("th",{parentName:"tr",align:null},"Overloadable"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"~a")),(0,r.kt)("td",{parentName:"tr",align:null},"Bitwise NOT"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.bitwise.unary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a & b")),(0,r.kt)("td",{parentName:"tr",align:null},"Bitwise AND"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.bitwise.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a \\| b")),(0,r.kt)("td",{parentName:"tr",align:null},"Bitwise OR"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.bitwise.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a ^ b")),(0,r.kt)("td",{parentName:"tr",align:null},"Bitwise XOR"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.bitwise.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a << b")),(0,r.kt)("td",{parentName:"tr",align:null},"Bitwise Left Shift"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.bitwise.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a <<\\| b")),(0,r.kt)("td",{parentName:"tr",align:null},"Saturating Bitwise Left Shift"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.bitwise.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a >> b")),(0,r.kt)("td",{parentName:"tr",align:null},"Bitwise Right Shift"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.bitwise.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("h2",{id:"reflection-operators"},"Reflection Operators"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Syntax"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Operator Category"),(0,r.kt)("th",{parentName:"tr",align:null},"Overloadable"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"^a")),(0,r.kt)("td",{parentName:"tr",align:null},"Reflection"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.reflection.unary"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"NO"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"#a")),(0,r.kt)("td",{parentName:"tr",align:null},"Reification"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.reflection.unary"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"NO"))))),(0,r.kt)("h2",{id:"range-operators"},"Range Operators"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Syntax"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Operator Category"),(0,r.kt)("th",{parentName:"tr",align:null},"Operator Trait"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a...b")),(0,r.kt)("td",{parentName:"tr",align:null},"Closed Range"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.range.binary"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a..<b")),(0,r.kt)("td",{parentName:"tr",align:null},"Half-opened Range"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.range.binary"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a<..b")),(0,r.kt)("td",{parentName:"tr",align:null},"Half-opened Range"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.range.binary"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a<.<b")),(0,r.kt)("td",{parentName:"tr",align:null},"Opened Range"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.range.binary"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"...a")),(0,r.kt)("td",{parentName:"tr",align:null},"One-sided Range"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.range.unary"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a...")),(0,r.kt)("td",{parentName:"tr",align:null},"One-sided Range"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.range.unary"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h2",{id:"other-operators"},"Other Operators"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Syntax"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Operator Category"),(0,r.kt)("th",{parentName:"tr",align:null},"Overloadable"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a as TypeB")),(0,r.kt)("td",{parentName:"tr",align:null},"Type Casting"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.misc.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"TypeA is TypeB")),(0,r.kt)("td",{parentName:"tr",align:null},"Type Querying"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.misc.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a.b")),(0,r.kt)("td",{parentName:"tr",align:null},"Member Access"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.misc.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a ?? b")),(0,r.kt)("td",{parentName:"tr",align:null},"Unwrapping with Default Value"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.misc.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a.?")),(0,r.kt)("td",{parentName:"tr",align:null},"Unwrapping, equivalent to ",(0,r.kt)("inlineCode",{parentName:"td"},"a ?? unreachable")),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.misc.unary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a[b]")),(0,r.kt)("td",{parentName:"tr",align:null},"Array Element Access"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.misc.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a.[b]")),(0,r.kt)("td",{parentName:"tr",align:null},"Pack Value Element Access"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.misc.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a::[b]")),(0,r.kt)("td",{parentName:"tr",align:null},"Pack Type Element Access"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.misc.binary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"new TypeA")),(0,r.kt)("td",{parentName:"tr",align:null},"Memory Allocation"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.misc.unary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"delete a")),(0,r.kt)("td",{parentName:"tr",align:null},"Memory Deallocation"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.misc.unary"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"?TypeA")),(0,r.kt)("td",{parentName:"tr",align:null},"Optional Type"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.misc.unary"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"NO"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"a~b")),(0,r.kt)("td",{parentName:"tr",align:null},"Type Trait"),(0,r.kt)("td",{parentName:"tr",align:null},"stdatem.operator.misc.binary"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"NO"))))))}N.isMDXComponent=!0}}]);