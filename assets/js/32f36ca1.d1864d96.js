"use strict";(self.webpackChunkstd_atem_doc=self.webpackChunkstd_atem_doc||[]).push([[453],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>g});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(a),m=r,g=u["".concat(o,".").concat(m)]||u[m]||c[m]||l;return a?n.createElement(g,i(i({ref:t},d),{},{components:a})):n.createElement(g,i({ref:t},d))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},7642:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const l={},i="Values",s={unversionedId:"Language/Values/Overview",id:"Language/Values/Overview",title:"Values",description:"Integer Literals",source:"@site/docs/Language/Values/Overview.md",sourceDirName:"Language/Values",slug:"/Language/Values/Overview",permalink:"/docs/Language/Values/Overview",draft:!1,editUrl:"https://github.com/AtemLang/atem/tree/main/packages/create-docusaurus/templates/shared/docs/Language/Values/Overview.md",tags:[],version:"current",frontMatter:{},sidebar:"documentSidebar",previous:{title:"Struct",permalink:"/docs/Language/User-defined Types/Struct"},next:{title:"Overview",permalink:"/docs/Language/Variables/Overview"}},o={},p=[{value:"Integer Literals",id:"integer-literals",level:3},{value:"Float Literals",id:"float-literals",level:3},{value:"Character Literals",id:"character-literals",level:3},{value:"String Literals",id:"string-literals",level:3},{value:"String Literals",id:"string-literals-1",level:4},{value:"Interpolated String Literals",id:"interpolated-string-literals",level:4},{value:"Raw String Literals",id:"raw-string-literals",level:4},{value:"Interpolated Raw String Literals",id:"interpolated-raw-string-literals",level:4},{value:"Multiline String Literals",id:"multiline-string-literals",level:4},{value:"Escape Sequences",id:"escape-sequences",level:4}],d={toc:p},u="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"values"},"Values"),(0,r.kt)("h3",{id:"integer-literals"},"Integer Literals"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-atem"},"decimal := 114514;\nhex := 0xff;\nanother_hex := 0xFF;\noctal := 0o76;\nbinary := 0b100111;\n\n//underscores may be placed between two digits as a visual separator\nunderscore_separator := 100_000_000;\n")),(0,r.kt)("h3",{id:"float-literals"},"Float Literals"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-atem"},"floating_point := 123.0E+77;\nanother_float := 123.0;\nyet_another := 123.0e+77;\n\nhex_floating_point := 0x103.70p-5;\nanother_hex_float := 0x103.70;\nyet_another_hex_float := 0x103.70P-5;\n\n//underscores may be placed between two digits as a visual separator\nlightspeed := 299_792_458.000_000;\nnanosecond := 0.000_000_001;\nmore_hex := 0x1234_5678.9ABC_CDEFp-10;\n")),(0,r.kt)("h3",{id:"character-literals"},"Character Literals"),(0,r.kt)("p",null,"A character literal is a character quote by ",(0,r.kt)("inlineCode",{parentName:"p"},"''"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-atem"},"char : test \"Character Literals\" = {\n    c := 'a':c8;\n    nl := '\\n':c8;\n}\n")),(0,r.kt)("h3",{id:"string-literals"},"String Literals"),(0,r.kt)("h4",{id:"string-literals-1"},"String Literals"),(0,r.kt)("p",null,"A string literal is a character sequence quoted by ",(0,r.kt)("inlineCode",{parentName:"p"},'""'),", the character sequence may contains ",(0,r.kt)("a",{parentName:"p",href:"#escape-sequences"},"escape sequences"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-atem"},'string : test "String Literals" = {\n    str1 := "Hello World!";\n    escape := "next line\\n";\n}\n')),(0,r.kt)("h4",{id:"interpolated-string-literals"},"Interpolated String Literals"),(0,r.kt)("p",null,"A interpolated string literal is a character sequence which contains capture expressions. The interpolated string literal needs to be quoted by ",(0,r.kt)("inlineCode",{parentName:"p"},'""'),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-atem"},'fstring : test "Interpolated String Literals" = {\n    i := 42:i32;\n    b := true;\n    arr : [_]i32 = {1, 1, 5};\n    fstr := "i = i$, b = b$, arr = arr$";\n    assert(fstr == "i = 42, b = true, arr = {1, 1, 5}");\n}\n')),(0,r.kt)("h4",{id:"raw-string-literals"},"Raw String Literals"),(0,r.kt)("p",null,"A raw string literal is a character sequence quoted by ",(0,r.kt)("inlineCode",{parentName:"p"},'R"()"'),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-atem"},'raw_string : test "Raw String Literals" = {\n    no_escape := R"(next line\\n)";\n    assert(no_escape == "next line\\\\n");\n}\n')),(0,r.kt)("h4",{id:"interpolated-raw-string-literals"},"Interpolated Raw String Literals"),(0,r.kt)("p",null,"A raw string literal is a character sequence quoted by ",(0,r.kt)("inlineCode",{parentName:"p"},'R"()"'),", the character sequence contains capture expressions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-atem"},'raw_fstring : test "Interpolated Raw String Literals" = {\n    i := 42:i32;\n    b := true;\n    arr : [_]i32 = {1, 1, 5};\n    fstr := R"(i = "i$", b = "b$", arr = "arr$")";\n    assert(fstr == "i = \\"42\\", b = \\"true\\", arr = \\"{1, 1, 5}\\"");\n}\n')),(0,r.kt)("h4",{id:"multiline-string-literals"},"Multiline String Literals"),(0,r.kt)("p",null,"Multiline string literals have no escapes and can span across multiple lines. To start a multiline string literal, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"\\\\")," token. Just like a comment, the string literal goes until the end of the line. The end of the line is not included in the string literal. However, if the next line begins with ",(0,r.kt)("inlineCode",{parentName:"p"},"\\\\")," then a newline is appended and the string literal continues."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-atem"},'multiline_string : test "Multiline String Literals" = {\n    multiline_str := \n    \\\\#include <stdio.h>\n    \\\\\n    \\\\int main(int argc, char **argv) {\n    \\\\    printf("hello world\\n");\n    \\\\    return 0;\n    \\\\}\n    ;\n}\n')),(0,r.kt)("h4",{id:"escape-sequences"},"Escape Sequences"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Escape Sequence"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"\\\\'")),(0,r.kt)("td",{parentName:"tr",align:null},"Single quote")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'\\\\"')),(0,r.kt)("td",{parentName:"tr",align:null},"Double quote")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"\\\\?")),(0,r.kt)("td",{parentName:"tr",align:null},"Question mark")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"\\\\\\\\")),(0,r.kt)("td",{parentName:"tr",align:null},"Backslash")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"\\\\a")),(0,r.kt)("td",{parentName:"tr",align:null},"Audible bell")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"\\\\b")),(0,r.kt)("td",{parentName:"tr",align:null},"Backspace")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"\\\\f")),(0,r.kt)("td",{parentName:"tr",align:null},"Form feed - new page")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"\\\\n")),(0,r.kt)("td",{parentName:"tr",align:null},"Line feed - new line")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"\\\\r")),(0,r.kt)("td",{parentName:"tr",align:null},"Carriage return")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"\\\\t")),(0,r.kt)("td",{parentName:"tr",align:null},"Horizontal tab")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"\\\\v")),(0,r.kt)("td",{parentName:"tr",align:null},"Vertical tab")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"\\\\o{NN}")),(0,r.kt)("td",{parentName:"tr",align:null},"Arbitrary octal value")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"\\\\x{NN}")),(0,r.kt)("td",{parentName:"tr",align:null},"Arbitrary hexadecimal value")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"\\\\b{NN}")),(0,r.kt)("td",{parentName:"tr",align:null},"Arbitrary binary value")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"\\\\u{NNN}")),(0,r.kt)("td",{parentName:"tr",align:null},"Arbitrary ",(0,r.kt)("a",{parentName:"td",href:"https://en.wikipedia.org/wiki/Unicode"},"Unicode")," value")))))}c.isMDXComponent=!0}}]);