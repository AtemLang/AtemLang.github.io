"use strict";(self.webpackChunkstd_atem_doc=self.webpackChunkstd_atem_doc||[]).push([[6241],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(t),f=a,d=u["".concat(s,".").concat(f)]||u[f]||m[f]||i;return t?r.createElement(d,l(l({ref:n},c),{},{components:t})):r.createElement(d,l({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=f;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[u]="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=t[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},8227:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=t(7462),a=(t(7294),t(3905));const i={sidebar_position:1,title:"Introduction"},l="Introduction",o={unversionedId:"intro",id:"intro",title:"Introduction",description:"WARNING: Atem is highly experimental.",source:"@site/docs/01-intro.md",sourceDirName:".",slug:"/intro",permalink:"/zh-Hans/docs/intro",draft:!1,editUrl:"https://github.com/AtemLang/atem/tree/main/packages/create-docusaurus/templates/shared/docs/01-intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Introduction"},sidebar:"documentSidebar",next:{title:"Comments",permalink:"/zh-Hans/docs/Comments"}},s={},p=[{value:"Design Goals and Principles",id:"design-goals-and-principles",level:2},{value:"Atem Standard Library",id:"atem-standard-library",level:2},{value:"Language Tour",id:"language-tour",level:2},{value:"Hello World",id:"hello-world",level:3},{value:"Fibonacci",id:"fibonacci",level:3},{value:"Fibonacci (non-recursive)",id:"fibonacci-non-recursive",level:3},{value:"Printable Points",id:"printable-points",level:3},{value:"Rectangle with Calculated Properties",id:"rectangle-with-calculated-properties",level:3},{value:"Allocating Memory",id:"allocating-memory",level:3}],c={toc:p},u="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"WARNING: Atem is highly experimental.")),(0,a.kt)("p",null,"Atem is a general purpose programming language. Atem takes inspiration from many other languages like C++,  ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/hsutter/cppfront"},"Cpp2"),", ",(0,a.kt)("a",{parentName:"p",href:"https://circle-lang.org"},"Circle"),", ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/carbon-language/carbon-lang"},"Carbon"),", ",(0,a.kt)("a",{parentName:"p",href:"https://www.rust-lang.org/"},"Rust"),", ",(0,a.kt)("a",{parentName:"p",href:"https://www.swift.org/documentation/"},"Swift"),", ",(0,a.kt)("a",{parentName:"p",href:"https://dlang.org/"},"D"),", ",(0,a.kt)("a",{parentName:"p",href:"https://ziglang.org/"},"Zig"),", ",(0,a.kt)("a",{parentName:"p",href:"https://scala-lang.org"},"Scala"),", ",(0,a.kt)("a",{parentName:"p",href:"https://kotlinlang.org/"},"Kotlin"),", ",(0,a.kt)("a",{parentName:"p",href:"https://go.dev/"},"Go"),", ",(0,a.kt)("a",{parentName:"p",href:"https://www.haskell.org/"},"Haskell"),", and ",(0,a.kt)("a",{parentName:"p",href:"https://julialang.org/"},"Julia"),"."),(0,a.kt)("h2",{id:"design-goals-and-principles"},"Design Goals and Principles"),(0,a.kt)("p",null,"Design Goals (in no particular order):"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Performant")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Scalable")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Robust")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Extensible and Customizable")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Expressive")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Consistent")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Opt-in Safety"))),(0,a.kt)("p",null,"Design Principles (in no particular order):"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Prefer runtime exceptions over runtime crashes"),(0,a.kt)("li",{parentName:"ul"},"Prefer compile time error over runtime exceptions"),(0,a.kt)("li",{parentName:"ul"},"Prefer explicitness over implicitness to make the code self-explanatory and intent clear"),(0,a.kt)("li",{parentName:"ul"},"Prefer implementing language features in one consistent syntax to avoid additional burdens on users"),(0,a.kt)("li",{parentName:"ul"},"Prefer expressions over statements to encourage the use of functional programming.")),(0,a.kt)("h2",{id:"atem-standard-library"},"Atem Standard Library"),(0,a.kt)("p",null,"Atem has its own standard library which contains commonly used algorithms, data structures,  and many other tools to help you build programs on Atem. The atem-stdlib also has its own documentation, see ",(0,a.kt)("a",{parentName:"p",href:"https://atemlang.github.io/libtutorial/intro"},"here"),"(WIP)."),(0,a.kt)("h2",{id:"language-tour"},"Language Tour"),(0,a.kt)("h3",{id:"hello-world"},"Hello World"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'println := import func std.io.print.println\n\nmain := {\n    println("Hello World!")\n}\n')),(0,a.kt)("h3",{id:"fibonacci"},"Fibonacci"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-atem"},'println := import func std.io.print.println\n\nfib := func (n: UInt64) -> Int64 recursive throws pure\nrequire { \n    expect n > 0\n    ensure with ret := return ret >= 0\n}\n= if n == 1 or n == 2 then 1 else self(n - 1) + self(n - 2)\n\nmain := func {\n    println("fib(10)$") //print 55\n}\n')),(0,a.kt)("h3",{id:"fibonacci-non-recursive"},"Fibonacci (non-recursive)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-atem"},'println := import func std.io.print.println\n\nfib := func (n: UInt64) -> UInt64 throws pure\nrequire {\n    expect n > 0\n    ensure with ret := return ret >= 0\n}\n{\n    if n == 1 or n == 2 {\n        return 1\n    } else {\n        f1 := var 1 as Int64\n        f2 := var 1 as Int64\n        f3 := var -1 as Int64\n        for i in 3...n {\n            f3 = f1 + f2\n            f1 = f2\n            f2 = f3\n        }\n        return f3\n    }\n    unreachable\n}\n\nmain := {\n    println("fib(10)$") //print 55\n}\n')),(0,a.kt)("h3",{id:"printable-points"},"Printable Points"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-atem"},'Printable := protocol {\n    require print := func () -> () throws default = {\n        println("{}", self)\n    }\n}\n\nPoint := struct member{\n    public x := var 0 as Int8\n    public y := var 0 as Int8\n}\n\nPrintablePoint := class extend {\n    inherit Point\n    impl Printable with {\n        require print := func () -> () throws {\n            println("(self.x$, self.y$)")\n        }\n    }\n} init {\n    := (x: Int8, y: Int8) {\n        self.x = x\n        self.y = y\n    }\n    := (coord: Int8) {\n        self.init(coord, coord)\n    }\n} deinit {\n    := {\n        println("Point (self.x$, self.y$) is deinitializing")\n    }\n} member {\n    public isAtOrigin := func () -> bool =\n        if self.x == 0 and self.y == 0 then true else false\n}\n\nmain := func {\n    point := val PrintablePoint.init(1, 2)\n    point.print()   //print (1, 2)\n    println("point.isAtOrigin()$")  //print false\n}\n')),(0,a.kt)("h3",{id:"rectangle-with-calculated-properties"},"Rectangle with Calculated Properties"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-atem"},"Point := class {\n    public x := var 0.0\n    public y := var 0.0\n}\nSize := class {\n    public width := var 0.0\n    public height := var 0.0\n}\nRectangle := class {\n    public origin := var Point.init()\n    public size := var Size.init()\n    public center := var Point.init() with {\n        := get {\n            centerX := self.origin.x + (self.size.width / 2)\n            centerY := self.origin.y + (self.size.height / 2)\n            return Point.init(x = centerX, y = centerY)\n        }\n        := set(newCenter) {\n            self.origin.x = self.newCenter.x - (self.size.width / 2)\n            self.origin.y = self.newCenter.y - (self.size.height / 2)\n        }\n    }\n}\n")),(0,a.kt)("h3",{id:"allocating-memory"},"Allocating Memory"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ate"},'println := import func std.io.print.println\nGeneralPurposeAllocator := import class std.memory.allocator.GeneralPurposeAllocator;\n\nmain := func {\n    gpa := var GeneralPurposeAllocator.init()\n    defer { gpa.deallocateAll() }\n    allocator := var gpa.getAllocator()\n    \n    buffer := var try! allocator.allocate(size = 64)\n    println("Get a buffer: buffer.getRawPointer()$")\n    \n    return 0\n}\n')))}m.isMDXComponent=!0}}]);