"use strict";(self.webpackChunkstd_atem_doc=self.webpackChunkstd_atem_doc||[]).push([[1330],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(a),f=r,m=u["".concat(s,".").concat(f)]||u[f]||d[f]||i;return a?n.createElement(m,o(o({ref:t},p),{},{components:a})):n.createElement(m,o({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}f.displayName="MDXCreateElement"},6558:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const i={},o="Variables",l={unversionedId:"Variables",id:"Variables",title:"Variables",description:"Constants and variables associate a name with a value of a particular type. The value of a constant can't be changed once it's set, whereas a variable can be set to a different value in the future.",source:"@site/docs/04-Variables.md",sourceDirName:".",slug:"/Variables",permalink:"/zh-Hans/docs/Variables",draft:!1,editUrl:"https://github.com/AtemLang/atem/tree/main/packages/create-docusaurus/templates/shared/docs/04-Variables.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"documentSidebar",previous:{title:"Inspirations List",permalink:"/zh-Hans/docs/Inspirations List"},next:{title:"Function",permalink:"/zh-Hans/docs/Functions/Function"}},s={},c=[{value:"No Identifier Shadowing",id:"no-identifier-shadowing",level:2},{value:"Long Identifiers",id:"long-identifiers",level:2},{value:"Variables and Constants",id:"variables-and-constants",level:2},{value:"Storage Duration Specifiers",id:"storage-duration-specifiers",level:2},{value:"Global Storage Duration Specifier",id:"global-storage-duration-specifier",level:3},{value:"Static Storage Duration Specifier",id:"static-storage-duration-specifier",level:3},{value:"Thread-Local Storage Duration Specifier",id:"thread-local-storage-duration-specifier",level:3},{value:"Local Storage Duration Specifier",id:"local-storage-duration-specifier",level:3}],p={toc:c},u="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"variables"},"Variables"),(0,r.kt)("p",null,"Constants and variables associate a name with a value of a particular type. The value of a ",(0,r.kt)("em",{parentName:"p"},"constant")," can't be changed once it's set, whereas a ",(0,r.kt)("em",{parentName:"p"},"variable")," can be set to a different value in the future."),(0,r.kt)("h2",{id:"no-identifier-shadowing"},"No Identifier Shadowing"),(0,r.kt)("p",null,"Variable identifiers are never allowed to shadow the identifiers from outer scope:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-atem"},"foo := 1;\n{\n    foo := 2;   //compile error\n}\n")),(0,r.kt)("p",null,"If you can confirm that you really need name shadowing(why?), you can annotate the variable with ",(0,r.kt)("inlineCode",{parentName:"p"},"@shadowing"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-atem"},"foo := 1;\n{\n    foo @shadowing := 2;    //good\n}\n")),(0,r.kt)("p",null,"Or you can just turn the compile-time safety check off by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"@compileTimeSafetyProfile()"),"(but again, why you need this?):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-atem"},"foo := 1;\n@compileTimeSafetyProfile(safety.compiletime.ruleset.no_shadowing, false);\n{\n    foo @shadowing := 2;    //good\n}\n")),(0,r.kt)("h2",{id:"long-identifiers"},"Long Identifiers"),(0,r.kt)("p",null,"Normal identifiers can only contains numbers, characters, and underscores. You can make the identifier to be regular string by using ",(0,r.kt)("inlineCode",{parentName:"p"},'@""'),"s to quote them:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-atem"},'@"hey i am a variable with a very long identifier!" := "Hello";\n')),(0,r.kt)("p",null,"The long identifiers are also allowed to be the same as keywords:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-atem"},'@"true" := true;\nassert(@"true" == true);\n')),(0,r.kt)("h2",{id:"variables-and-constants"},"Variables and Constants"),(0,r.kt)("p",null,"You can specify the mutability of variables by adding a ",(0,r.kt)("inlineCode",{parentName:"p"},"const/mutable")," specifier to it, you can't modify variable that is ",(0,r.kt)("inlineCode",{parentName:"p"},"const"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-atem"},"foo := 1;\n//equals to:\nfoo const := 1;\nfoo = 2;    //error! try to assign a constant\n\nbar mutable := 2;\nbar = 42;   //good\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"const/mutable")," will be part of the variable's type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-atem"},"foo const := 1:i32;\nbar mutable := 2:i32;\n//equals to:\nfoo : const i32 := 1;\nbar : mutable i32 := 1;\n//or\nbar : i32 := 1;\n")),(0,r.kt)("p",null,"You can remove the ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," in type by type traits:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-atem"},"foo : const i32 = 1;\nBarType := foo~getType()~removeConst();\nbar : BarType = 2;\nbar = 42;   //good\n")),(0,r.kt)("h2",{id:"storage-duration-specifiers"},"Storage Duration Specifiers"),(0,r.kt)("h3",{id:"global-storage-duration-specifier"},"Global Storage Duration Specifier"),(0,r.kt)("p",null,"The global variables have static lifetime and order-independent. Their initializer are implicitly compile-time. The variables declares in the module level are implicitly global."),(0,r.kt)("h3",{id:"static-storage-duration-specifier"},"Static Storage Duration Specifier"),(0,r.kt)("p",null,"The static variables also have static lifetime and order-independent. Their initializer are implicitly compile-time. Only the variables declares in the block level can be static."),(0,r.kt)("h3",{id:"thread-local-storage-duration-specifier"},"Thread-Local Storage Duration Specifier"),(0,r.kt)("h3",{id:"local-storage-duration-specifier"},"Local Storage Duration Specifier"))}d.isMDXComponent=!0}}]);