"use strict";(self.webpackChunkstd_atem_doc=self.webpackChunkstd_atem_doc||[]).push([[8079],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=o,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(h,a(a({ref:t},c),{},{components:n})):r.createElement(h,a({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6655:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const i={},a="Pointers",s={unversionedId:"Pointers",id:"Pointers",title:"Pointers",description:"Introduction",source:"@site/docs/06-Pointers.md",sourceDirName:".",slug:"/Pointers",permalink:"/zh-Hans/docs/Pointers",draft:!1,editUrl:"https://github.com/AtemLang/atem/tree/main/packages/create-docusaurus/templates/shared/docs/06-Pointers.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"documentSidebar",previous:{title:"Static Array",permalink:"/zh-Hans/docs/Arrays/StaticArray"},next:{title:"Optional",permalink:"/zh-Hans/docs/Sum Type/Optional"}},p={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Simple Pointers",id:"simple-pointers",level:2},{value:"Declaring and Dereferencing Pointers",id:"declaring-and-dereferencing-pointers",level:3},{value:"Checking Pointer Validity",id:"checking-pointer-validity",level:3},{value:"Managed Pointers",id:"managed-pointers",level:2},{value:"Optional Pointers",id:"optional-pointers",level:2},{value:"Pointer Arithmetic",id:"pointer-arithmetic",level:2}],c={toc:l},d="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"pointers"},"Pointers"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Pointer")," is a special kind of variable that stores an memory address in it. When a pointer stores an memory address that represents another object in the memory, we say that the pointer is ",(0,o.kt)("strong",{parentName:"p"},"pointing")," to the object. You can access the object indirectly by the pointers pointed to the object, or so-called ",(0,o.kt)("em",{parentName:"p"},"dereferencing"),"."),(0,o.kt)("p",null,"Pointers are powerful tools especially operating the ",(0,o.kt)("em",{parentName:"p"},"low-level resources"),". But pointers, especially the ",(0,o.kt)("em",{parentName:"p"},"simple pointers"),", could be ",(0,o.kt)("em",{parentName:"p"},"very")," dangerous if you didn't use them well. The most dangerous accident of using pointers is try to dereference a pointer that points to a object which no longer exist or a pointer that points to ",(0,o.kt)("strong",{parentName:"p"},"null"),". We call the former ",(0,o.kt)("em",{parentName:"p"},"dangling pointer")," and the latter ",(0,o.kt)("em",{parentName:"p"},"null pointer"),". Coding with these kinds of pointers could result in bug, vulnerabilities, or even a unrecoverable crash."),(0,o.kt)("p",null,"Fortunately, Atem also provides ways to prevent most disadvantage of pointers. You can use ",(0,o.kt)("em",{parentName:"p"},"optional pointers")," and ",(0,o.kt)("em",{parentName:"p"},"managed pointers")," to replace the most use of simple pointers. The flexibility of Atem also enables us to implement garbage collectors or even borrow checkers to ensure further safety."),(0,o.kt)("h2",{id:"simple-pointers"},"Simple Pointers"),(0,o.kt)("h3",{id:"declaring-and-dereferencing-pointers"},"Declaring and Dereferencing Pointers"),(0,o.kt)("p",null,"You can declare a pointer of ",(0,o.kt)("inlineCode",{parentName:"p"},"Int32")," by the ",(0,o.kt)("inlineCode",{parentName:"p"},".&")," operator:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-atem"},"ptr mutable: Int32.& = undefined;\n")),(0,o.kt)("p",null,"When you have a pointer, you can now let it point to some objects by assigning their address to the pointer. You can use ",(0,o.kt)("inlineCode",{parentName:"p"},".@")," operator to get some object's address:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-atem"},"var mutable: Int32 = 42;\nptr = var.@;\n")),(0,o.kt)("p",null,"You can access the pointed object by using dereference operator ",(0,o.kt)("inlineCode",{parentName:"p"},".*")," if you are sure the pointer is pointing to it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-atem"},'println("ptr.*$");  //print 42\n')),(0,o.kt)("h3",{id:"checking-pointer-validity"},"Checking Pointer Validity"),(0,o.kt)("h2",{id:"managed-pointers"},"Managed Pointers"),(0,o.kt)("h2",{id:"optional-pointers"},"Optional Pointers"),(0,o.kt)("h2",{id:"pointer-arithmetic"},"Pointer Arithmetic"))}u.isMDXComponent=!0}}]);